前情回顾 :

1. 同步互斥

   目的 : 使多个线程操作共享资源时有一定的配合顺序

   Event()    e.set()  e.clear()  e.wait()

   Lock()     acquire()    release()


   死锁 : 阻塞无法执行

2. GIL

   结果 : 解释器同时只能解释一个线程

         只有在高延迟多阻塞的情况下才会使用线程

3. 进程线程对比

4. 多进程多线程网络并发模型


ftp 文件服务器分析

【1】 分为服务端和客户端，要求可以有多个客户端同时操作。

【2】 客户端可以查看服务器文件库中有什么文件。

【3】 客户端可以从文件库中下载文件到本地。

【4】 客户端可以上传一个本地文件到文件库。

【5】 使用print在客户端打印命令输入提示，引导操作


1. 技术分析

   * 并发模型  (多进程  多线程)
   * 网络传输方法 : tcp

2. 功能分析 (封装模型  类)

   搭建网络架构

   查看文件列表
   上传文件
   下载文件
   退出

3. 通信协议设计

                请求类型     请求参量
   查看文件列表     L
   上传文件        P
   下载文件        G         filename
   退出            Q


    服务端反馈 : YES 表示允许
               NO 表示拒绝


4. 分析具体功能

   搭建网络架构

   查看文件列表

        客户端:  1. 发送请求给服务器 要看文件列表
                2. 等待服务器回复,确定是否可以查看
                3. Yes 开始接收文件列表
                4. No --> 结束


        服务端:  1. 接收请求,进行初步处理
                2. 根据情况给客户端回复 (Yes No)
                3. Yes 将文件列表发送给服务端


   上传文件
   下载文件
   退出


5. 细节的处理和完善



练习: 有一个列表中有若干个数字,其中将奇数乘以2打印出来,偶数除以2打印出来,如果是0
则不处理

for i in list:
    if i % 2 == 1:
        print(i * 2)
    else:
        print(i / 2)


练习1 : 使用poll方法,实现与select_server.py功能一样的服务端程序


作业 :  1. ftp文件服务器没写完成的写完
       2. select方法 掌握熟练, 读懂select_server
       3. poll_server没写完的完成












