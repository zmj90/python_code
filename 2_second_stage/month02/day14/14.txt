前情回顾:

1. 进程细节注意

   os.getpid()
   os.getppid()
   sys.exit()

   孤儿进程和僵尸进程   join()   signal()

2. 自定义进程类

   继承Process --> 重写__init__ 加载父类init--> 重写run

3. 进程池

   Pool(4)
   pool.apply_async()
   pool.close()
   pool.join()

4. 消息队列

   Queue()
   q.put()
   q.get()


聊天室分析

功能 ： 类似qq群功能

【1】 有人进入聊天室需要输入姓名，姓名不能重复

【2】 有人进入聊天室时，其他人会收到通知：xxx 进入了聊天室

【3】 一个人发消息，其他人会收到：xxx ： xxxxxxxxxxx

【4】 有人退出聊天室，则其他人也会收到通知:xxx退出了聊天室

【5】 扩展功能：服务器可以向所有用户发送公告:管理员消息： xxxxxxxxx


1. 需求认知(用什么技术实现什么功能)

2. 基本的技术分析

    * 网络传输  --> udp
    * 服务端需要存储用户名 -->  用户名  地址  [(name,address),]  {name:address}
    * 服务器给所有人发消息
    * 群发消息怎么发 --> 转发机制  (发送接收互不干扰,发送一个进程,接收一个进程)
    * 区分请求类型 --> 定协议

3. 功能模块划分  (拆)

   函数封装

   * 架构模型搭建
   * 进入聊天室
   * 聊天
   * 退出聊天室

4.  每一个功能的具体实现逻辑

    固定有特定含义的、其他地方会用到的 (全局变量)

    * 架构模型搭建

       客户端 : 创建udp套接字,准备给服务端发请求

       服务端 : 创建UDP套接字,等待客户端请求
       (可能接收到不同客户端请求,可能请求类型有很多种)


    * 进入聊天室

       客户端　
       　　　1. 输入姓名
            2. 将姓名发送给服务端
            3. 等待接收服务端的反馈结果

       服务端
            1. 接收客户端姓名
            2. 判断该用户是否存在
            3. 将结果发送给客户端
            4. [不能进入 原因] -- > 结束
            5. [能进入 OK] --> 存储用户信息/告知其他人


    * 聊天

        客户端:
            1. 创建新进程
            2. 父进程负责循环输入内容,发送消息
            3. 子进程负责循环接收消息,打印

        服务端:
            1. 接收消息
            2. 转发给其他人


    * 退出聊天室

           客户端:
               1. 输入quit (或者直接ctrl-c)
               2. 告知服务端
               3. 进程退出

           服务端 :
               1. 接收消息
               2. 将其从字典删除
               3. 告知其他人



5. 通信协议

   客户端请求类别:

       进入聊天室

          L name

       聊天

          C name msg

       退出聊天室

           Q xxxxx


6. 优化修改
    * 注释添加
    * 代码的重构
    * 细节修改






